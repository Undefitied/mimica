"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    meta: {
        schema: [
            {
                type: "object",
                properties: {
                    order: {
                        type: "array",
                        items: {
                            type: "string",
                        },
                    },
                },
            },
        ],
        hasSuggestions: true,
    },
    create(context) {
        const { order } = context.options[0];
        const indexByHook = new Map(order.map((hook, i) => [hook, i]));
        const getHookIndex = (name) => { var _a; return (_a = indexByHook.get(name)) !== null && _a !== void 0 ? _a : Number.MAX_SAFE_INTEGER; };
        return {
            BlockStatement(node) {
                const previousHooks = new Map();
                for (const statement of node.body) {
                    if (statement.type !== "VariableDeclaration") {
                        continue;
                    }
                    for (const declarator of statement.declarations) {
                        if (declarator.type !== "VariableDeclarator") {
                            continue;
                        }
                        const { init } = declarator;
                        if (!init || init.type !== "CallExpression") {
                            continue;
                        }
                        const { callee } = init;
                        if (callee.type !== "Identifier") {
                            continue;
                        }
                        const { name } = callee;
                        if (!name.startsWith("use")) {
                            continue;
                        }
                        const hookIdx = getHookIndex(name);
                        for (const [prevHookName, prevHookNode] of previousHooks) {
                            const prevHookIdx = getHookIndex(prevHookName);
                            if (hookIdx < prevHookIdx) {
                                context.report({
                                    node: statement,
                                    message: `'${name}' should be declared before '${prevHookName}'`,
                                    suggest: [
                                        {
                                            desc: `Move before first '${prevHookName}'`,
                                            fix(fixer) {
                                                var _a, _b;
                                                const { sourceCode } = context;
                                                const statementText = sourceCode.getText(statement);
                                                const statementTextWithSemicolon = statementText.endsWith(";")
                                                    ? statementText
                                                    : `${statementText};`;
                                                const prevHookNodeIndentation = (_b = (_a = prevHookNode.loc) === null || _a === void 0 ? void 0 : _a.start.column) !== null && _b !== void 0 ? _b : 0;
                                                const indentation = " ".repeat(prevHookNodeIndentation);
                                                return [
                                                    fixer.remove(statement),
                                                    fixer.insertTextBefore(prevHookNode, `${statementTextWithSemicolon}\n${indentation}`),
                                                ];
                                            },
                                        },
                                    ],
                                });
                                return;
                            }
                        }
                        // TODO: replace with "upsert" once it's available
                        if (!previousHooks.has(name)) {
                            previousHooks.set(name, statement);
                        }
                    }
                }
            },
        };
    },
};
