"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
exports.default = {
    meta: {
        schema: [
            {
                type: "array",
                items: {
                    type: "object",
                    properties: {
                        functionName: {
                            type: "string",
                        },
                        variableName: {
                            type: "string",
                        },
                    },
                    additionalProperties: false,
                },
            },
        ],
    },
    create(context) {
        var _a;
        const functionConfigs = ((_a = context.options[0]) !== null && _a !== void 0 ? _a : []);
        const groups = (0, lodash_1.groupBy)(functionConfigs, o => o.functionName);
        const variableNamesByFunctionName = (0, lodash_1.mapValues)(groups, arr => new Set(arr.map(o => o.variableName)));
        return {
            VariableDeclarator(node) {
                const { id, init } = node;
                const isMatching = init &&
                    init.type === "CallExpression" &&
                    init.callee.type === "Identifier" &&
                    id.type === "Identifier";
                if (!isMatching) {
                    return;
                }
                const functionName = init.callee.name;
                const allowedVariableNames = variableNamesByFunctionName[functionName];
                if (!allowedVariableNames || allowedVariableNames.has(id.name)) {
                    return;
                }
                const suggestedNamesStr = [...allowedVariableNames]
                    .map(name => `"${name}"`)
                    .join(", ");
                context.report({
                    node: id,
                    message: `Variable assigned by the result of ${functionName}(...) should have one of the following names: ${suggestedNamesStr}.`,
                });
            },
        };
    },
};
